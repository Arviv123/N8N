# ===== Vercel Deployment =====
# vercel.json
{
  "version": 2,
  "builds": [
    {
      "src": "server.js",
      "use": "@vercel/node"
    }
  ],
  "routes": [
    {
      "src": "/(.*)",
      "dest": "/server.js"
    }
  ],
  "env": {
    "NODE_ENV": "production"
  }
}

---

# ===== Railway Deployment =====
# railway.toml
[build]
builder = "nixpacks"

[deploy]
startCommand = "node server.js http $PORT"
healthcheckPath = "/"
healthcheckTimeout = 300
restartPolicyType = "never"

[env]
NODE_ENV = "production"

---

# ===== Render Deployment =====
# render.yaml
services:
  - type: web
    name: iplan-mcp-server
    env: node
    buildCommand: npm install
    startCommand: node server.js http $PORT 0.0.0.0
    plan: free
    envVars:
      - key: NODE_ENV
        value: production

---

# ===== Docker Configuration =====
# Dockerfile
FROM node:18-alpine

WORKDIR /app

COPY package*.json ./
RUN npm ci --only=production

COPY . .

EXPOSE 3000

CMD ["node", "server.js", "http", "3000", "0.0.0.0"]

---

# docker-compose.yml
version: '3.8'
services:
  iplan-mcp-server:
    build: .
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3

---

# ===== Heroku Deployment =====
# Procfile
web: node server.js http $PORT 0.0.0.0

---

# ===== DigitalOcean App Platform =====
# .do/app.yaml
name: iplan-mcp-server
services:
- name: web
  source_dir: /
  github:
    repo: your-username/iplan-mcp-server
    branch: main
  run_command: node server.js http $PORT 0.0.0.0
  environment_slug: node-js
  instance_count: 1
  instance_size_slug: basic-xxs
  envs:
  - key: NODE_ENV
    value: production

---

# ===== Google Cloud Run =====
# cloudbuild.yaml
steps:
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/iplan-mcp-server', '.']
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/iplan-mcp-server']
  - name: 'gcr.io/cloud-builders/gcloud'
    args: ['run', 'deploy', 'iplan-mcp-server', 
           '--image', 'gcr.io/$PROJECT_ID/iplan-mcp-server', 
           '--platform', 'managed', 
           '--region', 'us-central1',
           '--allow-unauthenticated']

---

# ===== Netlify Functions =====
# netlify/functions/server.js
const express = require('express');
const serverless = require('serverless-http');
const { IplanMCPServer } = require('../../server.js');

const app = express();
const server = new IplanMCPServer();

// Configure for serverless
app.use('/.netlify/functions/server', server.app);

module.exports.handler = serverless(app);

---

# netlify.toml
[build]
  functions = "netlify/functions"

[functions]
  node_bundler = "esbuild"

[[redirects]]
  from = "/api/*"
  to = "/.netlify/functions/server/:splat"
  status = 200

---

# ===== Package.json for deployment =====
{
  "name": "iplan-mcp-server",
  "version": "1.0.0",
  "description": "MCP Server for Israel Planning Authority",
  "main": "server.js",
  "type": "module",
  "scripts": {
    "start": "node server.js http $PORT 0.0.0.0",
    "dev": "node server.js http 3000",
    "stdio": "node server.js",
    "build": "echo 'No build step required'",
    "test": "echo 'No tests specified'"
  },
  "engines": {
    "node": ">=18.0.0"
  },
  "dependencies": {
    "@modelcontextprotocol/sdk": "^0.1.0",
    "express": "^4.18.2",
    "cors": "^2.8.5",
    "node-fetch": "^3.3.2"
  },
  "keywords": ["mcp", "israel", "planning", "n8n", "automation"],
  "author": "Your Name",
  "license": "MIT"
}